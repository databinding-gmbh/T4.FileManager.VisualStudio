{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#t4filemanagervisualstudio","title":"T4.FileManager.VisualStudio","text":"<p>With the T4.FileManager you can define into which files T4 generates your code. You are no longer bound to the default behaviour of T4 that generates all the code of the \u201cexample.tt\u201d template into a single \u201cexample.cs\u201d file. Now you can split your code into the files you want: </p> <ul> <li>Putting each generated data class into a single code file</li> <li>Creating a server and a client component based on a common model</li> <li>Distribute generated code to multiple projects within a solution</li> <li>Set the file properties (like ResXFileCodeGenerator as CustomTool)</li> <li>Update previously generated files</li> </ul>"},{"location":"#features","title":"Features","text":"Feature Description Code Generation Put each generated class into a separate file. File Header Create a custom header in your generated files. Support for subfolders Generate files inside subfolders. Support for projects Generate files in different projects of your solution. File Properties Specify file properties like CustomTool or BuildAction. Overwrite Existing File Overwrite previously generated files. Shortcut support (Edit.FormatDocument) Cleanup the generated files to your coding standards. Disable main output file Tell T4.FileManager not to create a main output file. Logging Debug problems in your templates with the verbose log of T4.FileManager."},{"location":"#table-of-contents","title":"Table of contents","text":"<ol> <li>Installation</li> <li>Quick start</li> <li>Create instance</li> <li>Start or create file</li> <li>Add header to files</li> <li>Proceed to generate files </li> <li>Auto indent and clean-up</li> <li>Generated file infos as JSON</li> <li>Logging and main output file</li> <li>Living documentation and testing</li> <li>Change log</li> </ol>"},{"location":"01-Installation/","title":"Installation","text":""},{"location":"01-Installation/#requirements","title":"Requirements","text":"<ul> <li>Visual Studio 2017 or later</li> </ul>"},{"location":"01-Installation/#getting-started","title":"Getting started","text":"<p>Install the File Manager with NuGet. </p> <pre><code>Install-Package T4.FileManager.VisualStudio\n</code></pre> <p><code>T4.FileManager.VisualStudio.ttinclude</code> will be automatically added to your project root.</p>"},{"location":"02-Quick-start/","title":"Quick start","text":"<p>After you installed T4.FileManager into your project, you can dive right into your T4 template. A more thorough explanation follows in the next pages. </p>"},{"location":"02-Quick-start/#include-in-your-text-template","title":"Include in your text template","text":"<p>Open your text template (*.tt) or create a new one.</p>"},{"location":"02-Quick-start/#net-core-net-standard-net-5-net-6-nuget-with-packagereference","title":".NET Core, .NET Standard, NET 5, NET 6 (NuGet with PackageReference)","text":"<p>The File Manger will be linked to the NuGet system folder. You can compile your project and then reference it using $(TargetDir) in your template.</p> <p>Add the following code to the top of the file:</p> <pre><code>&lt;#@ include file=\"$(TargetDir)\\T4.FileManager.VisualStudio.ttinclude\" #&gt;\n</code></pre>"},{"location":"02-Quick-start/#net-framework-nuget-with-packagesconfig","title":".NET Framework (NuGet with packages.config)","text":"<p>The File Manager will be copied to the Project root. You can reference it using $(ProjectDir) in your template.</p> <p>Add the following code to the top of the file:</p> <pre><code>&lt;#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #&gt;\n</code></pre>"},{"location":"02-Quick-start/#extend-your-t4-template","title":"Extend your T4 template","text":"<p>With those 4 steps can you use the T4.FileManager to generate code into different files:</p> <ol> <li>Set hostspecific=\"true\" in your template</li> <li>Include T4.FileManager.VisualStudio.ttinclude in your template</li> <li>Instantiate T4FileManager</li> <li>Start a new file with the CreateNewFile() method</li> <li>Close the file and generate it with the Generate() method</li> </ol> <p>The 4 parts are marked in this T4 template:</p> <pre><code>&lt;#@ template debug=\"false\" hostspecific=\"true\" language=\"C#\" #&gt;\n&lt;#@ assembly name=\"System.Core\" #&gt;\n&lt;#@ import namespace=\"System.Linq\" #&gt;\n&lt;#@ import namespace=\"System.Text\" #&gt;\n&lt;#@ import namespace=\"System.Collections.Generic\" #&gt;\n&lt;#@ output extension=\".txt\" #&gt;\n\n&lt;#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #&gt;\n\n&lt;#\nvar files = new string[] { \"PersonDto\", \"OrderDto\" };\n\nvar fileManager = T4FileManager.Create(this).EnableAutoIndent();\n\nforeach(var itm in files)\n{\n    fileManager.StartNewFile(itm + \".g.cs\", \"\",\"\");\n#&gt;\nnamespace Test\n{\n    public class &lt;#= itm #&gt;\n    {\n    }\n}\n&lt;#\n}\n    fileManager.Process();\n#&gt;\n</code></pre> <p>The call to EnableAutoIndent() is not necessary, but it will nicely format your code.</p>"},{"location":"02-Quick-start/#the-result","title":"The result","text":"<p>If you run the template from above it will create the two files PersonDto.g.cs and OrderDto.g.cs next to your template.</p> <p>PersonDto.g.cs: </p> <pre><code>namespace Test\n{\n    public class PersonDto\n    {\n    }\n}\n</code></pre> <p>OrderDto.g.cs:</p> <pre><code>namespace Test\n{\n    public class OrderDto\n    {\n    }\n}\n</code></pre>"},{"location":"02-Quick-start/#want-to-know-more","title":"Want to know more?","text":"<p>This is just the basic usage of T4.FileManager. You can find an explanation on all other features in the next pages of this documentation.</p>"},{"location":"04-Create-instance/","title":"Create instance","text":"<p>Create an instance of T4.FileManager</p> <pre><code>var fileManager = new T4FileManager(this);\n</code></pre>"},{"location":"04-Create-instance/#compatibility-to-old-filemanager","title":"Compatibility to old FileManager","text":"<pre><code>var fileManager = T4FileManager.Create(this);\n</code></pre> <p>Old version: TemplateFileManager.Create(this)</p>"},{"location":"05-Start-or-create-file/","title":"Start or create file","text":"<p>Put this line into your text template (*.tt) where you want to start a new file:</p> <pre><code>fileManager.StartNewFile(filename, projectname, subfolders, properties);\n</code></pre> <p>All the content that follows in your template will go into that file (until you close it with the Generate() method. </p>"},{"location":"05-Start-or-create-file/#parameters","title":"Parameters","text":"Parameter Type Description Exmaple/Value filename string The name of the file. \"test.cs\"required value, must NOT BE null projectname string The name of the project in which the file is created. \"Test.Business\"null = project name of current project subfolders string The path of (sub) folders inside the project. Path.Combine(\"Example\", \"Tests\")null = root of project properties class FileProperties Adding visual studio properties as example \"CustomTool\" or \"BuildAction\". var fp= new FileProperties();fp.CustomTool = \"ResXFileCodeGenerator\""},{"location":"05-Start-or-create-file/#properties","title":"Properties","text":"<p>Values for CopyToOutputDirectory:</p> <pre><code>CopyToOutputDirectory.DoNotCopy\nCopyToOutputDirectory.CopyAlways\nCopyToOutputDirectory.CopyIfNewer\n</code></pre> <p>Values for BuildAction:</p> <pre><code>BuildAction.None\nBuildAction.CSharpCompiler\nBuildAction.Content\nBuildAction.EmbeddedResource\n</code></pre>"},{"location":"05-Start-or-create-file/#example","title":"Example","text":"<pre><code>var settings = new FileProperties();\nsettings.CustomTool = \"\";\nsettings.BuildAction = BuildAction.EmbeddedResource;\nsettings.CopyToOutputDirectory = CopyToOutputDirectory.DoNotCopy;\n</code></pre>"},{"location":"05-Start-or-create-file/#compatibility-to-old-templatefilemanager","title":"Compatibility to old TemplateFileManager","text":"<pre><code>fileManager.StartNewFile(filename, projectname, subfolders, propertiesFromOldFileManager);\n</code></pre> <p>Important: Optional parameters are not implemented in the File Manager because this is no longer possible in T4 since Visual Studio 2017. Clean up optional parameters for the new File Manager.</p>"},{"location":"06-Add-header-to-files/","title":"Add header to files","text":"<p>You can specify a header that is written to your files. Everything that is between StartHeader() and FinishHeader() will go to the top of your file:</p> <pre><code>fileManager.StartHeader();\n#&gt;\n// -------------------------\n// databinding - T4\n// -------------------------\n&lt;#\nfileManager.FinishHeader();\nfileManager.StartNewFile(\"PersonDtoWithGlobal.g.cs\",\"\",\"\");\n</code></pre> <p>The generated files all get the same header:</p> <pre><code>// -------------------------\n// databinding - T4\n// -------------------------\nnamespace Test\n{\n    public class PersonDtoWithGlobal\n    {\n    }\n}\n</code></pre>"},{"location":"06-Add-header-to-files/#add-filename-to-header","title":"Add filename to header","text":"<p>You can access the name of the generated file with the $filename$ template:</p> <pre><code>var fileManager = T4FileManager.Create(this);\nfileManager.StartHeader();\n#&gt;\n// &lt;copyright file=\"$filename$\" company=\"databinding.gmbh\"&gt;\n//     databinding.gmbh - All rights reserved.\n// &lt;/copyright&gt;\n// &lt;author&gt;Mr. T4&lt;/author&gt;\n&lt;#\nfileManager.FinishHeader();\nfileManager.StartNewFile(\"PersonDtoWithSA1633.g.cs\",\"\",\"\");\n</code></pre> <p>In the generated file $filename$ is replaced with the name of the file:</p> <pre><code>// &lt;copyright file=\"OrderDtoWithSA1633.g.cs\" company=\"databinding.gmbh\"&gt;\n//     databinding.gmbh - All rights reserved.\n// &lt;/copyright&gt;\n// &lt;author&gt;Mr. T4&lt;/author&gt;\nnamespace Test\n{\n    public class OrderDtoWithHeader\n    {\n    }\n}\n</code></pre>"},{"location":"06-Add-header-to-files/#clear-header","title":"Clear Header","text":"<p>You can clear a defined header at any time with this method:</p> <pre><code>fileManager.ClearHeader();\n</code></pre>"},{"location":"06-Add-header-to-files/#compatibility-to-old-filemanager","title":"Compatibility to old FileManager","text":"<p>StartHeader is equivalent to old file manager.</p> <p>Instead of FinishHeader use old EndBlock.</p> <pre><code>fileManager.EndBlock();\n</code></pre>"},{"location":"07-Proceed-to-generate-files/","title":"Proceed to generate files","text":"<p>Finally, the files can be generated with the following code:</p> <pre><code>fileManager.Process();\n</code></pre>"},{"location":"07-Proceed-to-generate-files/#overwrite-existing-files","title":"Overwrite existing files","text":"<p>By default T4.FileManager only overwrites files it generated before. If you want to prevent that from happening, you can set the CanOverwriteExistingFile property to false:</p> <pre><code>fileManager.CanOverwriteExistingFile = true; // default\nfileManager.CanOverwriteExistingFile = false;\n</code></pre>"},{"location":"07-Proceed-to-generate-files/#set-encoding-for-generated-files","title":"Set encoding for generated files","text":"<p>By default file encode is UTF-8. If you want change it, you can set the Encoding property</p> <pre><code>fileManager.Encoding = Encoding.Unicode;\n</code></pre> <p>Alternatively, the setting can be made with the instantiation</p> <pre><code>var fileManager = T4FileManager.Create(this).SetOutputFileEncoding(Encoding.Unicode);\n</code></pre>"},{"location":"08-Auto-indent-and-clean-up/","title":"Auto indent and clean up","text":""},{"location":"08-Auto-indent-and-clean-up/#auto-indent","title":"Auto indent","text":"<p>You can set <code>IsAutoIndentEnabled</code> for enable Visual Studio process to format your generated files. The process is like opening the generated file, executing command <code>Edit.FormatDocument (CTRL+K, CTRL+D)</code>, saving and closing the file. You can change this behaviour by setting the property IsAutoIndentEnabled on the file manager:</p> <pre><code>fileManager.IsAutoIndentEnabled = false; // default \nfileManager.IsAutoIndentEnabled = true;\n</code></pre> <p>Important: There are 20 attempts per file trying to indent the file. This attempts are like normal user actions, wait until ends!</p>"},{"location":"08-Auto-indent-and-clean-up/#auto-clean-up-with-resharper","title":"Auto clean up with ReSharper","text":"<p>You can set <code>IsAutoCleanUpWithResharperEnabled</code> for enable ReSharper process to clean up your generated files extendable with your StyleCop settings. The process is like opening the generated file, executing command <code>ReSharper_SilentCleanupCode (CTRL+E, CTRL+F)</code>, saving and closing the file. You can change this behaviour by setting the property IsAutoCleanUpWithResharperEnabled on the file manager:</p> <pre><code>fileManager.IsAutoCleanUpWithResharperEnabled = false; // default \nfileManager.IsAutoCleanUpWithResharperEnabled = true;\n</code></pre> <p>Important: There are 20 attempts per file trying to clean up the file. This attempts are like normal user actions, wait until ends!</p>"},{"location":"09-Generated-file-infos-as-json/","title":"Generated file infos as JSON","text":"<p>You can see all files T4.FileManager generated in the yourTemplate.info.json file. It is used by T4.FileManager to clean-up after itself when you change the location of generated files.</p> <pre><code>{\n  \"FilesToGenerate\": [\n    {\n      \"Filename\": \"ProjectTestFP.resx\",\n      \"Project\": \"\",\n      \"Path\": \"\",\n      \"Properties\": {\n        \"CustomTool\": \"ResXFileCodeGenerator\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"10-logging-and-main-output.file/","title":"Logging and main output file","text":"<p>You can modify where T4.FileManager write its logs to and disable the main output file.</p>"},{"location":"10-logging-and-main-output.file/#logging","title":"Logging","text":"<p>To turn on logging you need to create your T4.FileManager instance with this command:</p> <p><code>var fileManager = new T4FileManager(this).EnableLog();</code></p> <p>You now get a log with all important steps of the file generation in the output window of Visual Studio and in the file yourTemplate.txt.</p> <p>You can write your own log messages with the Log() method:</p> <p><code>&lt;# fileManager.Log(\"My custom log info for {0}\", itm); #&gt;</code></p>"},{"location":"10-logging-and-main-output.file/#disable-main-output-file","title":"Disable main output file","text":"<p>By default T4.FileManager creates a template main output file YourTemplateName.txt. If you want to disable it, you need to create your T4.FileManager instance with this command:</p> <p><code>var fileManager = T4FileManager.Create(this).DisableTemplateMainOutputFile();</code></p>"},{"location":"11-Living-documentation-and-testing/","title":"Living documentation and testing","text":"<p>The old version of T4.FileManager had bugs in new versions of Visual Studio that where hard to detect. To prevent this from happening again, we decided to develop the new version with BDD and functional tests that run inside Visual Studio. A nice benefit of this approach is that all features of T4.FileManager can be found in the examples section, including screenshots on how this should look in Visual Studio. </p>"},{"location":"11-Living-documentation-and-testing/#net-framework","title":"NET Framework","text":"<p>The latest functional testreport with screenshots based on Specification by Example can be found here.</p>"},{"location":"11-Living-documentation-and-testing/#net-corenet-50","title":"NET Core/NET 5.0+","text":"<p>The latest functional testreport with screenshots for NET 5+ based on Specification by Example that can be found here</p>"},{"location":"11-Living-documentation-and-testing/#lessons-learned","title":"Lessons learned","text":"<p>The following scenarios of feature UT001 Generate Code have a different behavior:</p> <ul> <li>Generate files ignores output extension .cs and uses .txt as default to avoid \"error generation output\" compile errors</li> <li>Generate files with DisableTemplateMainOutputFile enabled prevents generation of the t4 main output file (Workaround invalid file extension)</li> </ul> <p>To find such differences in behaviors in Visual Studio 2019/2022 our functional tests were a great help to us.</p>"},{"location":"12-Change-log/","title":"Change log","text":""},{"location":"12-Change-log/#403","title":"4.0.3","text":"<ul> <li>Bug Fix BuildAction #22 BUG: Wrong file property value set</li> </ul>"},{"location":"12-Change-log/#401","title":"4.0.1","text":"<ul> <li>Newtonsoft.Json replaced by TemplateInfoSerializer due to dependency conflicts as of Visual Studio 17.11+</li> </ul>"},{"location":"12-Change-log/#310","title":"3.1.0","text":"<ul> <li>Define Encoding for generated output files with .SetOutputFileEncoding(Encoding.Unicode). Scenario: Generate file with Unicode encoding </li> </ul>"},{"location":"12-Change-log/#300","title":"3.0.0","text":"<ul> <li>Support for Visual Studio 2022</li> </ul>"},{"location":"12-Change-log/#breaking-changes","title":"Breaking Changes","text":"<p>Visual Studio has Breaking Changes in EnvDTE-Automation. With this version T4.FileManager.VisualStudio.ttinclude works only in Visual Studio 2022. For backward compatibility you can use T4.FileManager.VisualStudio19.ttinclude</p>"},{"location":"12-Change-log/#200","title":"2.0.0","text":"<ul> <li>Compatibility to T4.TemplateFileManager improved</li> <li>Added class TemplateFileManager for better backward compatibility</li> <li>Header supports the placeholder $filename$ again</li> <li>Methods to configure the t4 file manager now follow the builder pattern style</li> </ul>"},{"location":"12-Change-log/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>GetNamespaceForCSharpCode() removed because CreateNewFile knows the namespace already (set by developer)</li> <li>CreateNewFile FileProperties Dictionary removed use class FileProperties instead</li> </ul>"},{"location":"12-Change-log/#130","title":"1.3.0","text":"<ul> <li>Logging generation in output window and main output text file if .EnableLog() called (Feature UT016)</li> </ul>"},{"location":"12-Change-log/#124","title":"1.2.4","text":"<ul> <li>Referencing in .net core projects new with $(TargetDir)</li> </ul>"},{"location":"12-Change-log/#breaking-changes-compared-to-templatefilemanager","title":"Breaking Changes compared to TemplateFileManager","text":"<ul> <li>No support for TFS Source Control</li> <li>No Parameter template support with sessions</li> <li>.txt4 replaced with .info.json</li> <li>WriteLineToBuildPane replaced with FileManager.Log()</li> <li>Disable split files (FileManager.Process) not supported</li> </ul>"}]}