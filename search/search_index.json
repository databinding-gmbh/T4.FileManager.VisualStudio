{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"T4.FileManager.VisualStudio With the T4.FileManager you can define into which files T4 generates your code. You are no longer bound to the default behaviour of T4 that generates all the code of the \u201cexample.tt\u201d template into a single \u201cexample.cs\u201d file. Now you can split your code into the files you want: Putting each generated data class into a single code file Creating a server and a client component based on a common model Distribute generated code to multiple projects within a solution Set the file properties (like ResXFileCodeGenerator as CustomTool) Update previously generated files Features Feature Description Code Generation Put each generated class into a separate file. File Header Create a custom header in your generated files. Support for subfolders Generate files inside subfolders. Support for projects Generate files in different projects of your solution. File Properties Specify file properties like CustomTool or BuildAction. Overwrite Existing File Overwrite previously generated files. Shortcut support (Edit.FormatDocument) Cleanup the generated files to your coding standards. Disable main output file Tell T4.FileManager not to create a main output file. Logging Debug problems in your templates with the verbose log of T4.FileManager. Table of contents Installation Quick start Include in your text template Create instance Start or create file Add header to files Proceed to generate files Auto indent and clean-up Generated file infos as json Logging and main output file Living documentation and testing Change log","title":"Home"},{"location":"#t4filemanagervisualstudio","text":"With the T4.FileManager you can define into which files T4 generates your code. You are no longer bound to the default behaviour of T4 that generates all the code of the \u201cexample.tt\u201d template into a single \u201cexample.cs\u201d file. Now you can split your code into the files you want: Putting each generated data class into a single code file Creating a server and a client component based on a common model Distribute generated code to multiple projects within a solution Set the file properties (like ResXFileCodeGenerator as CustomTool) Update previously generated files","title":"T4.FileManager.VisualStudio"},{"location":"#features","text":"Feature Description Code Generation Put each generated class into a separate file. File Header Create a custom header in your generated files. Support for subfolders Generate files inside subfolders. Support for projects Generate files in different projects of your solution. File Properties Specify file properties like CustomTool or BuildAction. Overwrite Existing File Overwrite previously generated files. Shortcut support (Edit.FormatDocument) Cleanup the generated files to your coding standards. Disable main output file Tell T4.FileManager not to create a main output file. Logging Debug problems in your templates with the verbose log of T4.FileManager.","title":"Features"},{"location":"#table-of-contents","text":"Installation Quick start Include in your text template Create instance Start or create file Add header to files Proceed to generate files Auto indent and clean-up Generated file infos as json Logging and main output file Living documentation and testing Change log","title":"Table of contents"},{"location":"01-Installation/","text":"Installation Requirements Visual Studio 2017 or Visual Studio 2019 Getting started Install the File Manager with NuGet. Install-Package T4.FileManager.VisualStudio T4.FileManager.VisualStudio.ttinclude will be automatically added to your project root.","title":"Installation"},{"location":"01-Installation/#installation","text":"","title":"Installation"},{"location":"01-Installation/#requirements","text":"Visual Studio 2017 or Visual Studio 2019","title":"Requirements"},{"location":"01-Installation/#getting-started","text":"Install the File Manager with NuGet. Install-Package T4.FileManager.VisualStudio T4.FileManager.VisualStudio.ttinclude will be automatically added to your project root.","title":"Getting started"},{"location":"02-Quick-start/","text":"Quick start After you installed T4.FileManager into your project, you can dive right into your T4 template. A more thorough explanation follows in the next pages. Extend your T4 template With those 4 steps can you use the T4.FileManager to generate code into different files: Include T4.FileManager.VisualStudio.ttinclude in your template Instantiate T4FileManager Start a new file with the CreateNewFile() method Close the file and generate it with the Generate() method The 4 parts are marked in this T4 template: < #@ template debug = \"false\" hostspecific = \"true\" language = \"C#\" # > < #@ assembly name = \"System.Core\" # > < #@ import namespace = \"System.Linq\" # > < #@ import namespace = \"System.Text\" # > < #@ import namespace = \"System.Collections.Generic\" # > < #@ output extension = \".txt\" # > < #@ include file = \"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" # > < # var files = new string [] { \"PersonDto\" , \"OrderDto\" }; var fileManager = T4FileManager . Create ( this ); fileManager . IsAutoIndentEnabled = true ; foreach ( var itm in files ) { fileManager . CreateNewFile ( itm + \".g.cs\" , \"\" , \"\" , null ); # > namespace Test { public class < # = itm # > { } } < # } fileManager . Generate (); # > The call to IsAutoIndentEnabled is not necessary, but it will nicely format your code. The result If you run the template from above it will create the two files PersonDto.g.cs and OrderDto.g.cs next to your template. PersonDto.g.cs: namespace Test { public class PersonDto { } } OrderDto.g.cs: namespace Test { public class OrderDto { } } Want to know more? This is just the basic usage of T4.FileManager. You can find an explanation on all other features in the next pages of this documentation.","title":"Quick start"},{"location":"02-Quick-start/#quick-start","text":"After you installed T4.FileManager into your project, you can dive right into your T4 template. A more thorough explanation follows in the next pages.","title":"Quick start"},{"location":"02-Quick-start/#extend-your-t4-template","text":"With those 4 steps can you use the T4.FileManager to generate code into different files: Include T4.FileManager.VisualStudio.ttinclude in your template Instantiate T4FileManager Start a new file with the CreateNewFile() method Close the file and generate it with the Generate() method The 4 parts are marked in this T4 template: < #@ template debug = \"false\" hostspecific = \"true\" language = \"C#\" # > < #@ assembly name = \"System.Core\" # > < #@ import namespace = \"System.Linq\" # > < #@ import namespace = \"System.Text\" # > < #@ import namespace = \"System.Collections.Generic\" # > < #@ output extension = \".txt\" # > < #@ include file = \"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" # > < # var files = new string [] { \"PersonDto\" , \"OrderDto\" }; var fileManager = T4FileManager . Create ( this ); fileManager . IsAutoIndentEnabled = true ; foreach ( var itm in files ) { fileManager . CreateNewFile ( itm + \".g.cs\" , \"\" , \"\" , null ); # > namespace Test { public class < # = itm # > { } } < # } fileManager . Generate (); # > The call to IsAutoIndentEnabled is not necessary, but it will nicely format your code.","title":"Extend your T4 template"},{"location":"02-Quick-start/#the-result","text":"If you run the template from above it will create the two files PersonDto.g.cs and OrderDto.g.cs next to your template. PersonDto.g.cs: namespace Test { public class PersonDto { } } OrderDto.g.cs: namespace Test { public class OrderDto { } }","title":"The result"},{"location":"02-Quick-start/#want-to-know-more","text":"This is just the basic usage of T4.FileManager. You can find an explanation on all other features in the next pages of this documentation.","title":"Want to know more?"},{"location":"03-Include-in-your-text-template/","text":"Include in your text template Open your text template (*.tt) or create a new one. .NET Core, .NET Standard, NET 5 The File Manger will be linked to the NuGet system folder. You can compile your project and then reference it using $(TargetDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(TargetDir)\\T4.FileManager.VisualStudio.ttinclude\" #> .NET Framework The File Manager will be copied to the Project root. You can reference it using $(ProjectDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":"Include in your text template"},{"location":"03-Include-in-your-text-template/#include-in-your-text-template","text":"Open your text template (*.tt) or create a new one.","title":"Include in your text template"},{"location":"03-Include-in-your-text-template/#net-core-net-standard-net-5","text":"The File Manger will be linked to the NuGet system folder. You can compile your project and then reference it using $(TargetDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(TargetDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":".NET Core, .NET Standard, NET 5"},{"location":"03-Include-in-your-text-template/#net-framework","text":"The File Manager will be copied to the Project root. You can reference it using $(ProjectDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":".NET Framework"},{"location":"04-Create-instance/","text":"Create instance Create an instance of T4.FileManager var fileManager = new T4FileManager(this); or var fileManager = new T4FileManager(this.GenerationEnvironment, this.Host); Compatibility to old FileManager var fileManager = T4FileManager.Create(this); Old version: TemplateFileManager.Create(this)","title":"Create instance"},{"location":"04-Create-instance/#create-instance","text":"Create an instance of T4.FileManager var fileManager = new T4FileManager(this); or var fileManager = new T4FileManager(this.GenerationEnvironment, this.Host);","title":"Create instance"},{"location":"04-Create-instance/#compatibility-to-old-filemanager","text":"var fileManager = T4FileManager.Create(this); Old version: TemplateFileManager.Create(this)","title":"Compatibility to old FileManager"},{"location":"05-Start-or-create-file/","text":"Start or create file Put this line into your text template (*.tt) where you want to start a new file: fileManager.CreateNewFile(filename, projectname, subfolders, properties); All the content that follows in your template will go into that file (until you close it with the Generate() method. Parameters Parameter Type Description Exmaple/Value filename string The name of the file. \"test.cs\" required value, should NOT BE null projectname string The name of the project in which the file is created. \"Test.Business\" null = project name of current project subfolders string The path of (sub) folders inside the project. Path.Combine(\"Example\", \"Tests\") null = root of project properties Dictionary Adding visual studio properties as example \"CustomTool\" or \"CopyToOutputDirectory\". var settings = new Dictionary (); settings.Add(\"CopyToOutputDirectory\", 1) null = no properties set Properties There are some defined values for the Property : Property.CopyToOutputDirectory Property.BuildAction Property.CustomTool Property.CanOverwriteExistingFile Values for CopyToOutputDirectory : CopyToOutputDirectory.DoNotCopy CopyToOutputDirectory.CopyAlways CopyToOutputDirectory.CopyIfNewer Values for BuildAction : BuildAction.None BuildAction.CSharpCompiler BuildAction.Content BuildAction.EmbeddedResource Values for CanOverwriteExistingFile : CanOverwriteExistingFile.Yes CanOverwriteExistingFile.No Example var settings = new Dictionary<string, object>(); settings.Add(Property.CopyToOutputDirectory, CopyToOutputDirectory.CopyAlways); Compatibility to old FileManager fileManager.StartNewFile(filename, projectname, subfolders, propertiesFromOldFileManager); Important: Optional parameters are not implemented in the File Manager because this is no longer possible in T4 since Visual Studio 2017. Clean up optional parameters for the new File Manager.","title":"Start or create file"},{"location":"05-Start-or-create-file/#start-or-create-file","text":"Put this line into your text template (*.tt) where you want to start a new file: fileManager.CreateNewFile(filename, projectname, subfolders, properties); All the content that follows in your template will go into that file (until you close it with the Generate() method.","title":"Start or create file"},{"location":"05-Start-or-create-file/#parameters","text":"Parameter Type Description Exmaple/Value filename string The name of the file. \"test.cs\" required value, should NOT BE null projectname string The name of the project in which the file is created. \"Test.Business\" null = project name of current project subfolders string The path of (sub) folders inside the project. Path.Combine(\"Example\", \"Tests\") null = root of project properties Dictionary Adding visual studio properties as example \"CustomTool\" or \"CopyToOutputDirectory\". var settings = new Dictionary (); settings.Add(\"CopyToOutputDirectory\", 1) null = no properties set","title":"Parameters"},{"location":"05-Start-or-create-file/#properties","text":"There are some defined values for the Property : Property.CopyToOutputDirectory Property.BuildAction Property.CustomTool Property.CanOverwriteExistingFile Values for CopyToOutputDirectory : CopyToOutputDirectory.DoNotCopy CopyToOutputDirectory.CopyAlways CopyToOutputDirectory.CopyIfNewer Values for BuildAction : BuildAction.None BuildAction.CSharpCompiler BuildAction.Content BuildAction.EmbeddedResource Values for CanOverwriteExistingFile : CanOverwriteExistingFile.Yes CanOverwriteExistingFile.No","title":"Properties"},{"location":"05-Start-or-create-file/#example","text":"var settings = new Dictionary<string, object>(); settings.Add(Property.CopyToOutputDirectory, CopyToOutputDirectory.CopyAlways);","title":"Example"},{"location":"05-Start-or-create-file/#compatibility-to-old-filemanager","text":"fileManager.StartNewFile(filename, projectname, subfolders, propertiesFromOldFileManager); Important: Optional parameters are not implemented in the File Manager because this is no longer possible in T4 since Visual Studio 2017. Clean up optional parameters for the new File Manager.","title":"Compatibility to old FileManager"},{"location":"06-Add-header-to-files/","text":"Add header to files You can specify a header that is written to your files. Everything that is between StartHeader() and FinishHeader() will go to the top of your file: fileManager . StartHeader (); # > // ------------------------- // databinding - T4 // ------------------------- < # fileManager . FinishHeader (); fileManager . CreateNewFile ( \"PersonDtoWithGlobal.g.cs\" , \"\" , \"\" , null ); The generated files all get the same header: // ------------------------- // databinding - T4 // ------------------------- namespace Test { public class PersonDtoWithGlobal { } } Add filename to header You can access the name of the generated file with the $filename$ template: var fileManager = T4FileManager . Create ( this ); fileManager . StartHeader (); # > // <copyright file=\"$filename$\" company=\"databinding.gmbh\"> // databinding.gmbh - All rights reserved. // </copyright> // <author>Mr. T4</author> < # fileManager . FinishHeader (); fileManager . CreateNewFile ( \"PersonDtoWithSA1633.g.cs\" , \"\" , \"\" , null ); In the generated file $filename$ is replaced with the name of the file: // <copyright file=\"OrderDtoWithSA1633.g.cs\" company=\"databinding.gmbh\"> // databinding.gmbh - All rights reserved. // </copyright> // <author>Mr. T4</author> namespace Test { public class OrderDtoWithHeader { } } Clear Header You can clear a defined header at any time with this method: fileManager.ClearHeader(); Compatibility to old FileManager StartHeader is equivalent to old file manager. Instead of FinishHeader use old EndBlock. fileManager.EndBlock();","title":"Add header to files"},{"location":"06-Add-header-to-files/#add-header-to-files","text":"You can specify a header that is written to your files. Everything that is between StartHeader() and FinishHeader() will go to the top of your file: fileManager . StartHeader (); # > // ------------------------- // databinding - T4 // ------------------------- < # fileManager . FinishHeader (); fileManager . CreateNewFile ( \"PersonDtoWithGlobal.g.cs\" , \"\" , \"\" , null ); The generated files all get the same header: // ------------------------- // databinding - T4 // ------------------------- namespace Test { public class PersonDtoWithGlobal { } }","title":"Add header to files"},{"location":"06-Add-header-to-files/#add-filename-to-header","text":"You can access the name of the generated file with the $filename$ template: var fileManager = T4FileManager . Create ( this ); fileManager . StartHeader (); # > // <copyright file=\"$filename$\" company=\"databinding.gmbh\"> // databinding.gmbh - All rights reserved. // </copyright> // <author>Mr. T4</author> < # fileManager . FinishHeader (); fileManager . CreateNewFile ( \"PersonDtoWithSA1633.g.cs\" , \"\" , \"\" , null ); In the generated file $filename$ is replaced with the name of the file: // <copyright file=\"OrderDtoWithSA1633.g.cs\" company=\"databinding.gmbh\"> // databinding.gmbh - All rights reserved. // </copyright> // <author>Mr. T4</author> namespace Test { public class OrderDtoWithHeader { } }","title":"Add filename to header"},{"location":"06-Add-header-to-files/#clear-header","text":"You can clear a defined header at any time with this method: fileManager.ClearHeader();","title":"Clear Header"},{"location":"06-Add-header-to-files/#compatibility-to-old-filemanager","text":"StartHeader is equivalent to old file manager. Instead of FinishHeader use old EndBlock. fileManager.EndBlock();","title":"Compatibility to old FileManager"},{"location":"07-Proceed-to-generate-files/","text":"Proceed to generate files Finally the files can be generated with the following code: fileManager.Generate(); Overwrite existing files There is a variable to define if existing generated files should be overwritten or not. fileManager.CanOverwriteExistingFile = true; // default fileManager.CanOverwriteExistingFile = false; Compatibility to old FileManager fileManager.Process();","title":"Proceed to generate files"},{"location":"07-Proceed-to-generate-files/#proceed-to-generate-files","text":"Finally the files can be generated with the following code: fileManager.Generate();","title":"Proceed to generate files"},{"location":"07-Proceed-to-generate-files/#overwrite-existing-files","text":"There is a variable to define if existing generated files should be overwritten or not. fileManager.CanOverwriteExistingFile = true; // default fileManager.CanOverwriteExistingFile = false;","title":"Overwrite existing files"},{"location":"07-Proceed-to-generate-files/#compatibility-to-old-filemanager","text":"fileManager.Process();","title":"Compatibility to old FileManager"},{"location":"08-Auto-indent-and-clean-up/","text":"Auto indent and clean up Auto indent You can set IsAutoIndentEnabled for enable visual studio process to format your generated files. The process is like opening the generated file, executing command Edit.FormatDocument (CTRL+K, CTRL+D) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoIndentEnabled = false; // default fileManager.IsAutoIndentEnabled = true; Important: There are 20 attempts per file trying to indent the file. This attempts are like normal user actions, wait until ends! Auto clean up with resharper You can set IsAutoCleanUpWithResharperEnabled for enable Resharper process to clean up your generated files extendable with your StyleCop settings. The process is like opening the generated file, executing command ReSharper_SilentCleanupCode (CTRL+E, CTRL+F) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoCleanUpWithResharperEnabled = false; // default fileManager.IsAutoCleanUpWithResharperEnabled = true; Important: There are 20 attempts per file trying to clean up the file. This attempts are like normal user actions, wait until ends!","title":"Auto indent and clean up"},{"location":"08-Auto-indent-and-clean-up/#auto-indent-and-clean-up","text":"","title":"Auto indent and clean up"},{"location":"08-Auto-indent-and-clean-up/#auto-indent","text":"You can set IsAutoIndentEnabled for enable visual studio process to format your generated files. The process is like opening the generated file, executing command Edit.FormatDocument (CTRL+K, CTRL+D) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoIndentEnabled = false; // default fileManager.IsAutoIndentEnabled = true; Important: There are 20 attempts per file trying to indent the file. This attempts are like normal user actions, wait until ends!","title":"Auto indent"},{"location":"08-Auto-indent-and-clean-up/#auto-clean-up-with-resharper","text":"You can set IsAutoCleanUpWithResharperEnabled for enable Resharper process to clean up your generated files extendable with your StyleCop settings. The process is like opening the generated file, executing command ReSharper_SilentCleanupCode (CTRL+E, CTRL+F) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoCleanUpWithResharperEnabled = false; // default fileManager.IsAutoCleanUpWithResharperEnabled = true; Important: There are 20 attempts per file trying to clean up the file. This attempts are like normal user actions, wait until ends!","title":"Auto clean up with resharper"},{"location":"09-Generated-file-infos-as-json/","text":"Generated file infos as json If you want to see what files your t4 generates, there should be a .json-File next to your .tt-File (.info.json). It contains a list of all file infos of your generated files. The .json-File is also used to clean up the files if there should be path changes after regenerating files in this step fileManager.Generate() or fileManager.Process() .","title":"Generated file infos as json"},{"location":"09-Generated-file-infos-as-json/#generated-file-infos-as-json","text":"If you want to see what files your t4 generates, there should be a .json-File next to your .tt-File (.info.json). It contains a list of all file infos of your generated files. The .json-File is also used to clean up the files if there should be path changes after regenerating files in this step fileManager.Generate() or fileManager.Process() .","title":"Generated file infos as json"},{"location":"10-logging-and-main-output.file/","text":"Logging and main output file You can modify where T4.FileManager write its logs to and disable the main output file. Logging To turn on logging you need to create your T4.FileManager instance with this command: var fileManager = new T4FileManager(this).EnableLog(); You now get a log with all important steps of the file generation in the output window of Visual Studio and in the file YourTemplateName.txt . You can write your own log messages with the Log() method: <# fileManager.Log(\"My custom log info for {0}\", itm); #> Disable main output file By default T4.FileManager creates a template main output file YourTemplateName.txt . If you want to disable it, you need to create your T4.FileManager instance with this command: var fileManager = T4FileManager.Create(this).DisableTemplateMainOutputFile();","title":"Logging and main output file"},{"location":"10-logging-and-main-output.file/#logging-and-main-output-file","text":"You can modify where T4.FileManager write its logs to and disable the main output file.","title":"Logging and main output file"},{"location":"10-logging-and-main-output.file/#logging","text":"To turn on logging you need to create your T4.FileManager instance with this command: var fileManager = new T4FileManager(this).EnableLog(); You now get a log with all important steps of the file generation in the output window of Visual Studio and in the file YourTemplateName.txt . You can write your own log messages with the Log() method: <# fileManager.Log(\"My custom log info for {0}\", itm); #>","title":"Logging"},{"location":"10-logging-and-main-output.file/#disable-main-output-file","text":"By default T4.FileManager creates a template main output file YourTemplateName.txt . If you want to disable it, you need to create your T4.FileManager instance with this command: var fileManager = T4FileManager.Create(this).DisableTemplateMainOutputFile();","title":"Disable main output file"},{"location":"11-Living-documentation-and-testing/","text":"Living documentation and testing Since the old version of the FileManager had bugs in new versions of Visual Studio, we decided to develop the new one with BDD and end 2 end tests in Visual Studio. Our goal is the detection of breaking changes in further versions of Visual Studio and a list of supported features with examples. The last end 2 end test can be found here .","title":"Living documentation and testing"},{"location":"11-Living-documentation-and-testing/#living-documentation-and-testing","text":"Since the old version of the FileManager had bugs in new versions of Visual Studio, we decided to develop the new one with BDD and end 2 end tests in Visual Studio. Our goal is the detection of breaking changes in further versions of Visual Studio and a list of supported features with examples. The last end 2 end test can be found here .","title":"Living documentation and testing"},{"location":"12-Change-log/","text":"Change log 2.0.0 Compatibility to T4.TemplateFileManager improved Added class TemplateFileManager for better backward compatibility Header supports the placeholder $filename$ again Methods to configure the t4 file manager now follow the builder pattern style Breaking Changes GetNamespaceForCSharpCode() removed because CreateNewFile knows the namespace already (set by developer) CreateNewFile FileProperties Dictionary removed use class FileProperties instead 1.3.0 Logging generation in output window and main output text file if .EnableLog() called (Feature UT016) 1.2.4 Referencing in .net core projects new with $(TargetDir) Breaking Changes compared to TemplateFileManager No support for TFS Source Control No Parameter template support with sessions .txt4 replaced with .info.json WriteLineToBuildPane replaced with FileManager.Log() Disable split files (FileManager.Process) not supported","title":"Change log"},{"location":"12-Change-log/#change-log","text":"","title":"Change log"},{"location":"12-Change-log/#200","text":"Compatibility to T4.TemplateFileManager improved Added class TemplateFileManager for better backward compatibility Header supports the placeholder $filename$ again Methods to configure the t4 file manager now follow the builder pattern style Breaking Changes GetNamespaceForCSharpCode() removed because CreateNewFile knows the namespace already (set by developer) CreateNewFile FileProperties Dictionary removed use class FileProperties instead","title":"2.0.0"},{"location":"12-Change-log/#130","text":"Logging generation in output window and main output text file if .EnableLog() called (Feature UT016)","title":"1.3.0"},{"location":"12-Change-log/#124","text":"Referencing in .net core projects new with $(TargetDir)","title":"1.2.4"},{"location":"12-Change-log/#breaking-changes-compared-to-templatefilemanager","text":"No support for TFS Source Control No Parameter template support with sessions .txt4 replaced with .info.json WriteLineToBuildPane replaced with FileManager.Log() Disable split files (FileManager.Process) not supported","title":"Breaking Changes compared to TemplateFileManager"}]}