{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"T4.FileManager.VisualStudio With the T4.FileManager you can define into which files T4 generates your code. You are no longer bound to the default behaviour of T4 that generates all the code of the \u201cexample.tt\u201d template into a single \u201cexample.cs\u201d file. Now you can split your code into the files you want: Putting each generated data class into a single code file Creating a server and a client component based on a common model Distribute generated code to multiple projects within a solution Set the file properties (like ResXFileCodeGenerator as CustomTool) Update previously generated files Installing and Usage Installation Include in your text template Create instance Start or create file Add header to files Proceed to generate files Features Generated file infos as json Living documentation and testing Change log","title":"Home"},{"location":"#t4filemanagervisualstudio","text":"With the T4.FileManager you can define into which files T4 generates your code. You are no longer bound to the default behaviour of T4 that generates all the code of the \u201cexample.tt\u201d template into a single \u201cexample.cs\u201d file. Now you can split your code into the files you want: Putting each generated data class into a single code file Creating a server and a client component based on a common model Distribute generated code to multiple projects within a solution Set the file properties (like ResXFileCodeGenerator as CustomTool) Update previously generated files","title":"T4.FileManager.VisualStudio"},{"location":"#installing-and-usage","text":"Installation Include in your text template Create instance Start or create file Add header to files Proceed to generate files Features Generated file infos as json Living documentation and testing Change log","title":"Installing and Usage"},{"location":"01-Installation/","text":"Installation Requirements Visual Studio 2017 or Visual Studio 2019 Getting started Install the File Manager with nuget. Install-Package T4.FileManager.VisualStudio T4.FileManager.VisualStudio.ttinclude will be automatically added to your project root.","title":"Installation"},{"location":"01-Installation/#installation","text":"","title":"Installation"},{"location":"01-Installation/#requirements","text":"Visual Studio 2017 or Visual Studio 2019","title":"Requirements"},{"location":"01-Installation/#getting-started","text":"Install the File Manager with nuget. Install-Package T4.FileManager.VisualStudio T4.FileManager.VisualStudio.ttinclude will be automatically added to your project root.","title":"Getting started"},{"location":"02-Include-in-your-text-template/","text":"Include in your text template Create an empty text template file (*.tt). .NET Core, .NET Standard, NET 5 The File Manger will be linked to the nuget system folder. You can compile your project and then reference it using $(TargetDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(TargetDir)\\T4.FileManager.VisualStudio.ttinclude\" #> .NET Framework The File Manager will be copied to the Project root. You can reference it using $(ProjectDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":"Include in your text template"},{"location":"02-Include-in-your-text-template/#include-in-your-text-template","text":"Create an empty text template file (*.tt).","title":"Include in your text template"},{"location":"02-Include-in-your-text-template/#net-core-net-standard-net-5","text":"The File Manger will be linked to the nuget system folder. You can compile your project and then reference it using $(TargetDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(TargetDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":".NET Core, .NET Standard, NET 5"},{"location":"02-Include-in-your-text-template/#net-framework","text":"The File Manager will be copied to the Project root. You can reference it using $(ProjectDir) in your template. Add the following code to the top of the file: <#@ include file=\"$(ProjectDir)\\T4.FileManager.VisualStudio.ttinclude\" #>","title":".NET Framework"},{"location":"03-Create-instance/","text":"Create instance Create instance of T4.FileManager. var fileManager = new T4FileManager(this); or var fileManager = new T4FileManager(this.GenerationEnvironment, this.Host); Compatibility to old FileManager var fileManager = T4FileManager.Create(this); Old version: TemplateFileManager.Create(this)","title":"Create instance"},{"location":"03-Create-instance/#create-instance","text":"Create instance of T4.FileManager. var fileManager = new T4FileManager(this); or var fileManager = new T4FileManager(this.GenerationEnvironment, this.Host);","title":"Create instance"},{"location":"03-Create-instance/#compatibility-to-old-filemanager","text":"var fileManager = T4FileManager.Create(this); Old version: TemplateFileManager.Create(this)","title":"Compatibility to old FileManager"},{"location":"04-Start-or-create-file/","text":"Start or create file fileManager.CreateNewFile(filename, projectname, subfolders, properties); The following content is then generated into the file. To finish the file there are the following possibilities: A new file is simply started with the method above. The content should be generated (see proceed-to-generate-files ). It will be completed with the finish method: fileManager.FinishFile() . Parameters Parameter Type Description Exmaple/Value filename string The name of started file. \"test.cs\" required value, should NOT BE null projectname string The name of the project, where should be generate the file. \"Test.Business\" null = project name of current project subfolders string Subfolder path with starting point from defined project. Path.Combine(\"Example\", \"Tests\") null = root of project properties Dictionary Adding visual studio properties as example \"CustomTool\" or \"CopyToOutputDirectory\". var settings = new Dictionary (); settings.Add(\"CopyToOutputDirectory\", 1) null = no properties set Properties There are some defined values for the Property : Property.CopyToOutputDirectory Property.BuildAction Property.CustomTool Property.CanOverwriteExistingFile Values for CopyToOutputDirectory : CopyToOutputDirectory.DoNotCopy CopyToOutputDirectory.CopyAlways CopyToOutputDirectory.CopyIfNewer Values for BuildAction : BuildAction.None BuildAction.CSharpCompiler BuildAction.Content BuildAction.EmbeddedResource Values for CanOverwriteExistingFile : CanOverwriteExistingFile.Yes CanOverwriteExistingFile.No Example var settings = new Dictionary<string, object>(); settings.Add(Property.CopyToOutputDirectory, CopyToOutputDirectory.CopyAlways); Compatibility to old FileManager fileManager.StartNewFile(filename, projectname, subfolders, propertiesFromOldFileManager); Important: Optional parameters are not implemented in the File Manager because this is no longer possible in T4 since Visual Studio 2017. Clean up optional parameters for the new File Manager.","title":"Start or create file"},{"location":"04-Start-or-create-file/#start-or-create-file","text":"fileManager.CreateNewFile(filename, projectname, subfolders, properties); The following content is then generated into the file. To finish the file there are the following possibilities: A new file is simply started with the method above. The content should be generated (see proceed-to-generate-files ). It will be completed with the finish method: fileManager.FinishFile() .","title":"Start or create file"},{"location":"04-Start-or-create-file/#parameters","text":"Parameter Type Description Exmaple/Value filename string The name of started file. \"test.cs\" required value, should NOT BE null projectname string The name of the project, where should be generate the file. \"Test.Business\" null = project name of current project subfolders string Subfolder path with starting point from defined project. Path.Combine(\"Example\", \"Tests\") null = root of project properties Dictionary Adding visual studio properties as example \"CustomTool\" or \"CopyToOutputDirectory\". var settings = new Dictionary (); settings.Add(\"CopyToOutputDirectory\", 1) null = no properties set","title":"Parameters"},{"location":"04-Start-or-create-file/#properties","text":"There are some defined values for the Property : Property.CopyToOutputDirectory Property.BuildAction Property.CustomTool Property.CanOverwriteExistingFile Values for CopyToOutputDirectory : CopyToOutputDirectory.DoNotCopy CopyToOutputDirectory.CopyAlways CopyToOutputDirectory.CopyIfNewer Values for BuildAction : BuildAction.None BuildAction.CSharpCompiler BuildAction.Content BuildAction.EmbeddedResource Values for CanOverwriteExistingFile : CanOverwriteExistingFile.Yes CanOverwriteExistingFile.No","title":"Properties"},{"location":"04-Start-or-create-file/#example","text":"var settings = new Dictionary<string, object>(); settings.Add(Property.CopyToOutputDirectory, CopyToOutputDirectory.CopyAlways);","title":"Example"},{"location":"04-Start-or-create-file/#compatibility-to-old-filemanager","text":"fileManager.StartNewFile(filename, projectname, subfolders, propertiesFromOldFileManager); Important: Optional parameters are not implemented in the File Manager because this is no longer possible in T4 since Visual Studio 2017. Clean up optional parameters for the new File Manager.","title":"Compatibility to old FileManager"},{"location":"05-Add-header-to-files/","text":"Add header to files If you want to add a header to your files, you can set it once and it will be added to all your generated files. At first, you need to start the header. fileManager.StartHeader(); Add your header content in your T4. Complete your header. fileManager.FinishHeader(); If you want to clear your header in same T4 file, you can use following code. fileManager.ClearHeader(); Compatibility to old FileManager StartHeader is equivalent to old file manager. Instead of FinishHeader use old EndBlock. fileManager.EndBlock();","title":"Add header to files"},{"location":"05-Add-header-to-files/#add-header-to-files","text":"If you want to add a header to your files, you can set it once and it will be added to all your generated files. At first, you need to start the header. fileManager.StartHeader(); Add your header content in your T4. Complete your header. fileManager.FinishHeader(); If you want to clear your header in same T4 file, you can use following code. fileManager.ClearHeader();","title":"Add header to files"},{"location":"05-Add-header-to-files/#compatibility-to-old-filemanager","text":"StartHeader is equivalent to old file manager. Instead of FinishHeader use old EndBlock. fileManager.EndBlock();","title":"Compatibility to old FileManager"},{"location":"06-Proceed-to-generate-files/","text":"Proceed to generate files Finally the files can be generated with the following code: fileManager.Generate(); Overwrite existing files There is a variable to define if existing generated files should be overwritten or not. fileManager.CanOverwriteExistingFile = true; // default fileManager.CanOverwriteExistingFile = false; Compatibility to old FileManager fileManager.Process();","title":"Proceed to generate files"},{"location":"06-Proceed-to-generate-files/#proceed-to-generate-files","text":"Finally the files can be generated with the following code: fileManager.Generate();","title":"Proceed to generate files"},{"location":"06-Proceed-to-generate-files/#overwrite-existing-files","text":"There is a variable to define if existing generated files should be overwritten or not. fileManager.CanOverwriteExistingFile = true; // default fileManager.CanOverwriteExistingFile = false;","title":"Overwrite existing files"},{"location":"06-Proceed-to-generate-files/#compatibility-to-old-filemanager","text":"fileManager.Process();","title":"Compatibility to old FileManager"},{"location":"07-Features/","text":"Features Get namespace If you want to get automatically the namespace of your current file, you can use following code for standard C# code namespace. fileManager.GetNamespaceForCSharpCode(); Important: Method can only be used after CreateNewFile(...)/StartNewFile(...) . Auto indent You can set IsAutoIndentEnabled for enable visual studio process to format your generated files. The process is like opening the generated file, executing command Edit.FormatDocument (CTRL+K, CTRL+D) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoIndentEnabled = false; // default fileManager.IsAutoIndentEnabled = true; Important: There are 20 attempts per file trying to indent the file. This attempts are like normal user actions, wait until ends! Auto clean up with resharper You can set IsAutoCleanUpWithResharperEnabled for enable Resharper process to clean up your generated files extendable with your StyleCop settings. The process is like opening the generated file, executing command ReSharper_SilentCleanupCode (CTRL+E, CTRL+F) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoCleanUpWithResharperEnabled = false; // default fileManager.IsAutoCleanUpWithResharperEnabled = true; Important: There are 20 attempts per file trying to clean up the file. This attempts are like normal user actions, wait until ends!","title":"Features"},{"location":"07-Features/#features","text":"","title":"Features"},{"location":"07-Features/#get-namespace","text":"If you want to get automatically the namespace of your current file, you can use following code for standard C# code namespace. fileManager.GetNamespaceForCSharpCode(); Important: Method can only be used after CreateNewFile(...)/StartNewFile(...) .","title":"Get namespace"},{"location":"07-Features/#auto-indent","text":"You can set IsAutoIndentEnabled for enable visual studio process to format your generated files. The process is like opening the generated file, executing command Edit.FormatDocument (CTRL+K, CTRL+D) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoIndentEnabled = false; // default fileManager.IsAutoIndentEnabled = true; Important: There are 20 attempts per file trying to indent the file. This attempts are like normal user actions, wait until ends!","title":"Auto indent"},{"location":"07-Features/#auto-clean-up-with-resharper","text":"You can set IsAutoCleanUpWithResharperEnabled for enable Resharper process to clean up your generated files extendable with your StyleCop settings. The process is like opening the generated file, executing command ReSharper_SilentCleanupCode (CTRL+E, CTRL+F) , saving and closing the file. Set property on file manager as following. fileManager.IsAutoCleanUpWithResharperEnabled = false; // default fileManager.IsAutoCleanUpWithResharperEnabled = true; Important: There are 20 attempts per file trying to clean up the file. This attempts are like normal user actions, wait until ends!","title":"Auto clean up with resharper"},{"location":"08-Generated-file-infos-as-json/","text":"Generated file infos as json If you want to see what files your t4 generates, there should be a .json-File next to your .tt-File (.info.json). It contains a list of all file infos of your generated files. The .json-File is also used to clean up the files if there should be path changes after regenerating files in this step fileManager.Generate() or fileManager.Process() .","title":"Generated file infos as json"},{"location":"08-Generated-file-infos-as-json/#generated-file-infos-as-json","text":"If you want to see what files your t4 generates, there should be a .json-File next to your .tt-File (.info.json). It contains a list of all file infos of your generated files. The .json-File is also used to clean up the files if there should be path changes after regenerating files in this step fileManager.Generate() or fileManager.Process() .","title":"Generated file infos as json"},{"location":"09-Living-documentation-and-testing/","text":"Living documentation and testing Since the old version of the FileManager had bugs in new versions of Visual Studio, we decided to develop the new one with BDD and end 2 end tests in Visual Studio. Our goal is the detection of breaking changes in further versions of Visual Studio and a list of supported features with examples. The last end 2 end test can be found here .","title":"Living documentation and testing"},{"location":"09-Living-documentation-and-testing/#living-documentation-and-testing","text":"Since the old version of the FileManager had bugs in new versions of Visual Studio, we decided to develop the new one with BDD and end 2 end tests in Visual Studio. Our goal is the detection of breaking changes in further versions of Visual Studio and a list of supported features with examples. The last end 2 end test can be found here .","title":"Living documentation and testing"},{"location":"10-Change-log/","text":"Change log 2.0.0 Compatibility to T4.TemplateFileManager improved Added class TemplateFileManager for better backward compatibility Header supports the placeholder $filename$ again Methods to configure the t4 file manager now follow the builder pattern style GetNamespaceForCSharpCode() removed because CreateNewFile knows the namespace already (set by developer) New logo 1.3.0 Logging generation in output window and main output text file if .EnableLog() called (Feature UT016) 1.2.4 Referencing in .net core projects new with $(TargetDir) Breaking Changes compared to TemplateFileManager No support for TFS Source Control No Parameter template support with sessions .txt4 replaced with .info.json WriteLineToBuildPane replaced with FileManager.Log() Disable split files (FileManager.Process) not supported","title":"Change log"},{"location":"10-Change-log/#change-log","text":"","title":"Change log"},{"location":"10-Change-log/#200","text":"Compatibility to T4.TemplateFileManager improved Added class TemplateFileManager for better backward compatibility Header supports the placeholder $filename$ again Methods to configure the t4 file manager now follow the builder pattern style GetNamespaceForCSharpCode() removed because CreateNewFile knows the namespace already (set by developer) New logo","title":"2.0.0"},{"location":"10-Change-log/#130","text":"Logging generation in output window and main output text file if .EnableLog() called (Feature UT016)","title":"1.3.0"},{"location":"10-Change-log/#124","text":"Referencing in .net core projects new with $(TargetDir)","title":"1.2.4"},{"location":"10-Change-log/#breaking-changes-compared-to-templatefilemanager","text":"No support for TFS Source Control No Parameter template support with sessions .txt4 replaced with .info.json WriteLineToBuildPane replaced with FileManager.Log() Disable split files (FileManager.Process) not supported","title":"Breaking Changes compared to TemplateFileManager"}]}